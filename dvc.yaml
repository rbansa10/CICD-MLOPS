stages:
  # -------------------------------By: Rajat Bansal 30/9/2025
  # Stage 1: Data Ingestion
  # -------------------------------
  data_ingestion:
    # Command to run for this stage. This executes the script that pulls in or generates raw data.
    cmd: pip3 install --quiet pandas scikit-learn pyyaml nltk dvclive && python3
      src/data_ingestion.py
      #pip install --quiet pandas scikit-learn pyyaml
      #python3 src/data_ingestion.py

    # Dependencies: If any of these files change (script or inputs), DVC will rerun this stage.
    deps:
    - src/data_ingestion.py

    # Parameters (currently commented): 
    # If enabled, this would allow you to pass hyperparameters or configs 
    # (like test size for train/test split) directly from params.yaml.
    params:
    - data_ingestion.test_size

    # Outputs: The result of this stage. "data/raw" will be tracked by DVC.
    outs:
    - data/raw

  # -------------------------------
  # Stage 2: Data Preprocessing
  # -------------------------------
  data_preprocessing:
    # This script takes the raw data and applies cleaning, normalization, 
    # missing value handling, etc.
    cmd: python src/data_preprocessing.py

    # Dependencies: Both the raw data and the preprocessing script itself.
    deps:
    - data/raw
    - src/data_preprocessing.py

    # Parameters: Reads "fillna_method" from params.yaml (e.g., mean, median, forward-fill).
    # params:
    # - data_preprocessing.fillna_method

    # Outputs: The cleaned/intermediate dataset.
    outs:
    - data/interim

  # -------------------------------
  # Stage 3: Feature Engineering
  # -------------------------------
  feature_engineering:
    # This script extracts or generates new features from the interim dataset 
    # (e.g., feature scaling, encoding, dimensionality reduction).
    cmd: python src/feature_engineering.py

    # Dependencies: Requires cleaned/interim data and the script.
    deps:
    - data/interim
    - src/feature_engineering.py

    # Parameters (currently commented): Could be used to control the number 
    # of features or specific transformations (e.g., max_features).
    params:
    - feature_engineering.max_features

    # Outputs: Final processed dataset ready for training.
    outs:
    - data/processed

  # -------------------------------
  # Stage 4: Model Building
  # -------------------------------
  model_building:
    # This script trains a machine learning model using the processed data.
    cmd: python src/model_building.py

    # Dependencies: Needs processed data and the model-building script.
    deps:
    - data/processed
    - src/model_building.py

    # Parameters (currently commented): If enabled, these would let you configure 
    # the model hyperparameters (e.g., number of estimators, random state seed) 
    # through params.yaml, making experiments reproducible.
    params:
    - model_building.n_estimators
    - model_building.random_state

    # Outputs: The trained model artifact (pickled model file).
    outs:
    - models/model.pkl

  # -------------------------------
  # Stage 5: Model Evaluation
  # -------------------------------
  model_evaluation:
    # This script evaluates the trained model (accuracy, precision, recall, etc.).
    cmd: python src/model_evaluation.py

    # Dependencies: The model itself and the evaluation script.
    deps:
    - models/model.pkl
    - src/model_evaluation.py

    # Metrics: Stores evaluation results (e.g., accuracy, loss) in a JSON file.
    # These can be versioned, compared across runs, and plotted by DVC.
    metrics:
    - reports/metrics.json

# -------------------------------
# Optional Global Configurations
# -------------------------------

# params:
#   - dvclive/params.yaml
#   (This would allow centralized experiment tracking with dvclive, 
#   capturing hyperparameters across stages.)

# metrics:
#   - dvclive/metrics.json
#   (This would track metrics logged during training/evaluation in real time 
#   using dvclive, making them easy to visualize and compare.)

# plots:
#   - dvclive/plots/metrics:
#       x: step
#   (This defines plotting configuration for metrics over training steps, 
#   useful for visualizing loss curves, accuracy trends, etc.)



# stages:
#   data_ingestion:
#     cmd: python src/data_ingestion.py
#     deps:
#     - src/data_ingestion.py
#     # params:
#     # - data_ingestion.test_size
#     outs:
#     - data/raw
#   data_preprocessing:
#     cmd: python src/data_preprocessing.py
#     deps:
#     - data/raw
#     - src/data_preprocessing.py
#     params:
#     - data_preprocessing.fillna_method
#     outs:
#     - data/interim
#   feature_engineering:
#     cmd: python src/feature_engineering.py
#     deps:
#     - data/interim
#     - src/feature_engineering.py
#     # params:
#     # - feature_engineering.max_features
#     outs:
#     - data/processed
#   model_building:
#     cmd: python src/model_building.py
#     deps:
#     - data/processed
#     - src/model_building.py
#     # params:
#     # - model_building.n_estimators
#     # - model_building.random_state
#     outs:
#     - models/model.pkl
#   model_evaluation:
#     cmd: python src/model_evaluation.py
#     deps:
#     - models/model.pkl
#     - src/model_evaluation.py
#     metrics:
#     - reports/metrics.json
# # params:
# # - dvclive/params.yaml
# # metrics:
# # - dvclive/metrics.json
# # plots:
# # - dvclive/plots/metrics:
# #     x: step
params:
- dvclive/params.yaml
metrics:
- dvclive/metrics.json
plots:
- dvclive/plots/metrics:
    x: step
